---
- name: Get the latest k8s version
  when: kubernetes_version == "latest"
  block:
    - name: Get the latest release from github
      ansible.builtin.uri:
        url: "https://api.github.com/repos/kubernetes/kubernetes/releases/latest"
        return_content: true
      register: query_result
      when: not github_api_token_enabled | bool

    - name: Get the latest release from github with PAT
      ansible.builtin.uri:
        url: "https://api.github.com/repos/kubernetes/kubernetes/releases/latest"
        return_content: true
        headers:
          Authorization: "Bearer {{ github_api_token }}"
      register: query_result
      when: github_api_token_enabled | bool

    - name: Fix format to json
      ansible.builtin.set_fact:
        query_result: "{{ query_result.content | from_json }}"

    - name: Extract version from tag name
      ansible.builtin.set_fact:
        k8s_semantic_version: "{{ query_result.tag_name | regex_search(version_regex) }}"
      vars:
        version_regex: '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}'

    - name: Set major and minor version
      ansible.builtin.set_fact:
        k8s_major_version: "{{ _tmp[0] }}"
        k8s_minor_version: "{{ _tmp[1] }}"
        k8s_repo_version: "{{ _tmp[0] }}.{{ _tmp[1] }}"
      vars:
        _tmp: "{{ k8s_semantic_version.split('.') }}"

- name: Set major and minor version
  ansible.builtin.set_fact:
    k8s_major_version: "{{ _tmp[0] }}"
    k8s_minor_version: "{{ _tmp[1] }}"
    k8s_repo_version: "{{ _tmp[0] }}.{{ _tmp[1] }}"
  vars:
    _tmp: "{{ kubernetes_version.split('.') }}"
  when: kubernetes_version != "latest"

- name: Install kubeadm, kubectl, kubelet (ubuntu)
  when: os_family != "redhat"
  block:
    - name: Apt update
      ansible.builtin.apt:
        update_cache: true
      become: true

    - name: Install dependencies
      ansible.builtin.apt:
        name:
          - apt-transport-https
          - curl
          - ca-certificates
        state: present
      become: true

    - name: Download the Google Cloud public signing key
      ansible.builtin.get_url:
        url: "https://pkgs.k8s.io/core:/stable:/v{{ k8s_major_version }}.{{ k8s_minor_version }}/deb/Release.key"
        dest: /etc/apt/keyrings/kubernetes-apt-keyring.asc
        mode: "0644"
      become: true

    - name: Add kubernetes repository
      ansible.builtin.apt_repository:
        repo: >
          deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.asc]
          https://pkgs.k8s.io/core:/stable:/v{{ k8s_major_version }}.{{ k8s_minor_version }}/deb /
        state: present
        filename: kubernetes
      become: true

    - name: Apt update
      ansible.builtin.apt:
        update_cache: true
      become: true

    - name: Install the latest kubernetes commands
      ansible.builtin.apt:
        name:
          - kubectl
          - kubelet
          - kubeadm
        state: present
      become: true
      when: kubernetes_version == "latest"

    - name: "Install kubernetes commands version {{ kubernetes_version }}"
      ansible.builtin.apt:
        name:
          - "kubectl={{ kubernetes_version }}-1.1"
          - "kubelet={{ kubernetes_version }}-1.1"
          - "kubeadm={{ kubernetes_version }}-1.1"
        state: present
        allow_downgrade: true
        allow_change_held_packages: true
      become: true
      when: kubernetes_version != "latest"

    - name: Hold kubernetes commands to be upgraded
      ansible.builtin.dpkg_selections:
        name: "{{ item }}"
        selection: hold
      become: true
      loop:
        - kubectl
        - kubelet
        - kubeadm

- name: Install kubeadm, kubectl, kubelet (RHEL)
  when: os_family == "redhat"
  block:
    - name: Add kubernetes repository
      ansible.builtin.yum_repository:
        name: kubernetes
        description: kubernetes
        baseurl: "https://pkgs.k8s.io/core:/stable:/v{{ k8s_major_version }}.{{ k8s_minor_version }}/rpm/"
        enabled: true
        gpgcheck: true
        gpgkey: "https://pkgs.k8s.io/core:/stable:/v{{ k8s_major_version }}.{{ k8s_minor_version }}/rpm/repodata/repomd.xml.key"
        exclude:
          - kubelet
          - kubeadm
          - kubectl
          - cri-tools
          - kubernetes-cni
      become: true

    - name: Install the latest kubernetes commands
      ansible.builtin.dnf:
        name:
          - kubectl
          - kubelet
          - kubeadm
        state: present
        disable_excludes: kubernetes
      become: true
      when: kubernetes_version == "latest"

    - name: "Install kubernetes commands version {{ kubernetes_version }}"
      ansible.builtin.dnf:
        name:
          - "kubectl-{{ kubernetes_version }}"
          - "kubelet-{{ kubernetes_version }}"
          - "kubeadm-{{ kubernetes_version }}"
        state: present
        disable_excludes: kubernetes
      become: true
      when: kubernetes_version != "latest"

- name: Add completion
  when:
    - kubectl_add_completion | bool
    - '"bash" in node_shell or "zsh" in node_shell'
  block:
    - name: Get shell
      ansible.builtin.set_fact:
        node_shell: "{{ 'zsh' if 'zsh' in node_shell else 'bash' }}"

    - name: "Add kubectl completion in {{ node_shell }}rc"
      ansible.builtin.lineinfile:
        path: "/home/{{ node_user }}/.{{ node_shell }}rc"
        line: "source <(kubectl completion {{ node_shell }})"
